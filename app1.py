<<<<<<< HEAD
import streamlit as st
import pandas as pd
import qrcode  # Êñ∞Â¢û‰∫åÁª¥Á†ÅÂ∫ìÂØºÂÖ•
from io import BytesIO  # Êñ∞Â¢ûÂ≠óËäÇÊµÅÂ§ÑÁêÜÂØºÂÖ•

# ËÆæÁΩÆÈ°µÈù¢ÈÖçÁΩÆ
st.set_page_config(
    page_title="‰∏äÂ∏ÇÂÖ¨Âè∏Êï∞Â≠óÂåñËΩ¨ÂûãÊåáÊï∞Êü•ËØ¢",
    page_icon="üìä",
    layout="wide"
)

# ËØªÂèñÊï∞ÊçÆÔºà‰ΩøÁî®Áõ∏ÂØπË∑ØÂæÑÔºâ
@st.cache_data  # ÁºìÂ≠òÊï∞ÊçÆÂä†ËΩΩÔºåÊèêÈ´òÊÄßËÉΩ
def load_data():
    try:
        # ‰ΩøÁî®Áõ∏ÂØπË∑ØÂæÑËØªÂèñÊñá‰ª∂ÔºåÁ°Æ‰øùÊñá‰ª∂‰∏éapp1.pyÂú®Âêå‰∏ÄÁõÆÂΩï‰∏ã
        excel_file = pd.ExcelFile('Âê´ÂÖ¨Âè∏ËÇ°Á•®‰ª£Á†ÅÂêçÁß∞Á≠â.xlsx')
        df = excel_file.parse('Sheet1')
        # Á°Æ‰øùÊï∞ÊçÆÁ±ªÂûãÊ≠£Á°Æ
        df['ËÇ°Á•®‰ª£Á†Å'] = df['ËÇ°Á•®‰ª£Á†Å'].astype(int)
        return df
    except Exception as e:
        st.error(f"Êï∞ÊçÆÂä†ËΩΩÈîôËØØ: {e}")
        return pd.DataFrame()

df = load_data()

# È°µÈù¢Ê†áÈ¢òÂíåËØ¥Êòé
st.title("‰∏äÂ∏ÇÂÖ¨Âè∏Êï∞Â≠óÂåñËΩ¨ÂûãÊåáÊï∞Êü•ËØ¢Á≥ªÁªü")
st.markdown("ÈÄöËøáËæìÂÖ•‰∏äÂ∏ÇÂÖ¨Âè∏ËÇ°Á•®‰ª£Á†ÅÔºåÊü•ËØ¢ÂÖ∂Êï∞Â≠óÂåñËΩ¨ÂûãÊåáÊï∞Áõ∏ÂÖ≥‰ø°ÊÅØ")

# ÂàõÂª∫ÊêúÁ¥¢Âå∫Âüü
with st.container():
    col1, col2 = st.columns([3, 1])
    with col1:
        stock_code = st.text_input(
            "ËØ∑ËæìÂÖ•‰∏äÂ∏ÇÂÖ¨Âè∏ËÇ°Á•®‰ª£Á†Å:",
            placeholder="‰æãÂ¶Ç: 300076",
            key="stock_code_input"
        )
    with col2:
        st.write("")  # Âç†‰Ωç
        search_button = st.button("üîç Êü•ËØ¢", use_container_width=True)

# Êü•ËØ¢ÈÄªËæë
if search_button or stock_code:
    if not stock_code:
        st.warning("ËØ∑ËæìÂÖ•ËÇ°Á•®‰ª£Á†Å")
    else:
        try:
            stock_code = int(stock_code)
            result = df[df['ËÇ°Á•®‰ª£Á†Å'] == stock_code]
            
            if not result.empty:
                # ÊèêÂèñÊü•ËØ¢ÁªìÊûú
                code = result['ËÇ°Á•®‰ª£Á†Å'].values[0]
                name = result['‰ºÅ‰∏öÂêçÁß∞'].values[0]
                index_value = result['Êï∞Â≠óÂåñËΩ¨ÂûãÊåáÊï∞'].values[0]
                
                # ‰ΩøÁî®Âç°ÁâáÂºèÂ∏ÉÂ±ÄÂ±ïÁ§∫ÁªìÊûú
                st.success(f"Â∑≤ÊâæÂà∞ËÇ°Á•®‰ª£Á†Å‰∏∫ **{code}** ÁöÑÂÖ¨Âè∏‰ø°ÊÅØ")
                
                with st.container():
                    st.markdown("""
                    <style>
                        .info-card {
                            background-color: #f0f2f6;
                            border-radius: 10px;
                            padding: 1rem;
                            margin: 1rem 0;
                            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                        }
                    </style>
                    """, unsafe_allow_html=True)
                    
                    st.markdown(f"""
                    <div class="info-card">
                        <h3 style="color: #1E88E5;">{name} ({code})</h3>
                        <p><b>ËÇ°Á•®‰ª£Á†Å:</b> {code}</p>
                        <p><b>‰ºÅ‰∏öÂêçÁß∞:</b> {name}</p>
                        <p><b>Êï∞Â≠óÂåñËΩ¨ÂûãÊåáÊï∞:</b> <span style="color: {'green' if index_value > 50 else 'red'};">{index_value}</span></p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                # ÊòæÁ§∫Êï∞ÊçÆÊù•Ê∫êÂíåÊõ¥Êñ∞Êó∂Èó¥ÔºàÁ§∫‰æãÔºâ
                st.markdown(f"Êï∞ÊçÆÊù•Ê∫ê: Âê´ÂÖ¨Âè∏ËÇ°Á•®‰ª£Á†ÅÂêçÁß∞Á≠â.xlsx (Êõ¥Êñ∞‰∫é: {pd.Timestamp.now().strftime('%Y-%m-%d')})")
                
            else:
                st.error(f"Êú™ÊâæÂà∞ËÇ°Á•®‰ª£Á†Å‰∏∫ **{stock_code}** ÁöÑÊï∞ÊçÆ")
                
        except ValueError:
            st.error("ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÊï¥Êï∞ËÇ°Á•®‰ª£Á†ÅÔºàÂ¶Ç 300076Ôºâ")
        except Exception as e:
            st.error(f"Êü•ËØ¢ËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ: {e}")

# È°µÈù¢Â∫ïÈÉ®‰ø°ÊÅØ
st.markdown("---")
st.caption("¬© 2025 ‰∏äÂ∏ÇÂÖ¨Âè∏Êï∞Â≠óÂåñËΩ¨ÂûãÁ†îÁ©∂‰∏≠ÂøÉ | Êï∞ÊçÆ‰ªÖ‰æõÂèÇËÄÉ")

# Êñ∞Â¢û‰∫åÁª¥Á†ÅÁîüÊàêÂäüËÉΩ
def generate_qr_code(url):
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_H,
        box_size=10,
        border=4,
    )
    qr.add_data(url)
    qr.make(fit=True)
    img = qrcode.make_image(fill_color="black", back_color="white")
    buf = BytesIO()
    img.save(buf, format="PNG")
    return buf.getvalue()

# Ê∑ªÂä†Â∫îÁî®ËÆøÈóÆ‰∫åÁª¥Á†Å
st.markdown("### üì± ÁßªÂä®Á´ØËÆøÈóÆ")
st.write("Êâ´Êèè‰∏ãÊñπ‰∫åÁª¥Á†ÅËÆøÈóÆÂ∫îÁî®Ôºö")
app_url = "https://companydigindexquery-app-eqsmbnfht2xbqupfkqttsv.streamlit.app/"
qr_image = generate_qr_code(app_url)
st.image(qr_image, caption=f"Â∫îÁî®‰∫åÁª¥Á†Å (URL: {app_url})")
=======
import pandas as pd
import streamlit as st
import random

def main():
    st.title('‰∏äÂ∏ÇÂÖ¨Âè∏Êï∞Â≠óÂåñËΩ¨ÂûãÊåáÊï∞Êü•ËØ¢')
    
    # ËØªÂèñCSVÊñá‰ª∂
    # Â∞ÜËøôË°å‰ª£Á†ÅÔºö

    df = pd.read_csv("Âê´ÂÖ¨Âè∏ËÇ°Á•®‰ª£Á†ÅÂêçÁß∞Á≠â.csv")
    
    # Á°Æ‰øùËÇ°Á•®‰ª£Á†ÅÂàóÊòØÂ≠óÁ¨¶‰∏≤Á±ªÂûã
    if 'ËÇ°Á•®‰ª£Á†Å' in df.columns:
        df['ËÇ°Á•®‰ª£Á†Å'] = df['ËÇ°Á•®‰ª£Á†Å'].astype(str)
    
    # Á°Æ‰øùÊï∞ÊçÆ‰∏≠ÂåÖÂê´ÈúÄË¶ÅÁöÑÂàó
    required_columns = ['ËÇ°Á•®‰ª£Á†Å', '‰ºÅ‰∏öÂêçÁß∞', 'Êï∞Â≠óÂåñËΩ¨ÂûãÊåáÊï∞']
    if not all(column in df.columns for column in required_columns):
        st.error(f'Êï∞ÊçÆ‰∏≠Áº∫Â∞ëÂøÖË¶ÅÁöÑÂàó: {required_columns}')
        return

    # ÂàùÂßãÂåñ‰ºöËØùÁä∂ÊÄÅ
    if 'query_history' not in st.session_state:
        st.session_state.query_history = []
    if 'input_code' not in st.session_state:
        st.session_state.input_code = ''

    # ÂÆö‰πâÊåâÈíÆÁÇπÂáªÂõûË∞ÉÂáΩÊï∞
    def select_code(code):
        st.session_state.input_code = code
        # Áõ¥Êé•Âú®ÂõûË∞É‰∏≠ÊâßË°åÊü•ËØ¢
        result = df[df['ËÇ°Á•®‰ª£Á†Å'] == code]
        if not result.empty:
            st.session_state.current_result = result[required_columns]
            if code not in st.session_state.query_history:
                st.session_state.query_history.append(code)
        else:
            st.session_state.current_result = None

    # ËÇ°Á•®‰ª£Á†ÅËæìÂÖ•Ê°Ü
    input_code = st.text_input('ËØ∑ËæìÂÖ•ËÇ°Á•®‰ª£Á†Å', value=st.session_state.input_code, key='stock_input')
    # Êõ¥Êñ∞‰ºöËØùÁä∂ÊÄÅ
    if input_code != st.session_state.input_code:
        st.session_state.input_code = input_code
        st.session_state.current_result = None  # ËæìÂÖ•ÂèòÂåñÊó∂Ê∏ÖÈô§ÂΩìÂâçÁªìÊûú

    # ÈöèÊú∫Êé®ËçêËÇ°Á•®‰ª£Á†Å
    if not df.empty and 'ËÇ°Á•®‰ª£Á†Å' in df.columns:
        all_stock_codes = df['ËÇ°Á•®‰ª£Á†Å'].unique().tolist()
        num_to_recommend = min(10, len(all_stock_codes))
        recommended_codes = random.sample(all_stock_codes, num_to_recommend) if len(all_stock_codes) > 0 else []
        
        if recommended_codes:
            st.write("ÈöèÊú∫Êé®ËçêËÇ°Á•®‰ª£Á†Å:")
            cols = st.columns(5)
            for idx, code in enumerate(recommended_codes):
                col_idx = idx % 5
                with cols[col_idx]:
                    # ‰ΩøÁî®ÂõûË∞ÉÂáΩÊï∞Â§ÑÁêÜÊåâÈíÆÁÇπÂáª
                    st.button(code, key=f"recommend_{code}", on_click=select_code, args=(code,))

    # ÊòæÁ§∫ÂΩìÂâçÁªìÊûúÔºàÂ¶ÇÊûúÊúâÔºâ
    if 'current_result' in st.session_state and st.session_state.current_result is not None:
        st.write("Êü•ËØ¢ÁªìÊûú:")
        st.write(st.session_state.current_result)
    elif 'current_result' in st.session_state and st.session_state.current_result is None:
        st.warning('Êú™ÊâæÂà∞ËØ•ËÇ°Á•®‰ª£Á†ÅÂØπÂ∫îÁöÑËÆ∞ÂΩï')

    # ÊâãÂä®Êü•ËØ¢ÊåâÈíÆ
    if st.button('Êü•ËØ¢') and st.session_state.input_code:
        select_code(st.session_state.input_code)  # Â§çÁî®ÂõûË∞ÉÂáΩÊï∞

    # ÂéÜÂè≤Êü•ËØ¢ËÆ∞ÂΩï
    if st.session_state.query_history:
        selected_code = st.selectbox('ÈÄâÊã©ÂéÜÂè≤Êü•ËØ¢ËøáÁöÑËÇ°Á•®‰ª£Á†Å', st.session_state.query_history)
        if st.button('Êü•ËØ¢ÂéÜÂè≤ËÆ∞ÂΩï'):
            select_code(selected_code)  # Â§çÁî®ÂõûË∞ÉÂáΩÊï∞

if __name__ == '__main__':
    main()
>>>>>>> ffa28071ae86ce58004299711385cb97f200caa0
